name: "Generate SBOM"

# Generates a CycloneDX SBOM and uploads it to Dependency-Track

on:
  workflow_call:
    inputs:
      docker_image:
        description: "The Docker image and tag used to generate the SBOM"
        required: false
        type: string
      in_file:
        description: "Input file used to generate the Python SBOM"
        required: false
        type: string
        default: "requirements.txt"
      project_name:
        description: "Name of the Dependency-Track project"
        required: true
        type: string
      project_type:
        description: "Type of project that the SBOM is being generated for"
        required: true
        type: string
      project_version:
        description: "Version of the Dependency-Track project"
        required: true
        type: string
      working_directory:
        description: "Directory that contains the project dependency manifest"
        required: true
        type: string
      iam_role_to_assume:
        description: "IAM role arn needed to login using OIDC"
        required: false
        type: string
      iam_role_session_name:
        description: "IMA role session name needed by OIDC"
        required: false
        type: string
    secrets:
      dependency_track_api_key:
        description: "API key for Dependency-Track used to upload the SBOM"
        required: true

env:
  BOM_REPRODUCIBLE: 1
  CYCLONEDX_NODE: "3.9.0"
  CYCLONEDX_PHP: "3.10.0"
  CYCLONEDX_PYTHON: "3.2.1"
  PROJECT_TYPES: '["docker", "node", "php", "python"]'

jobs:
  generate-sbom:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      actions: write
      checks: write
      statuses: write
    steps:
      - name: Fail if unsupported project type
        if: contains(fromJson(env.PROJECT_TYPES), inputs.project_type) == false
        run: |
          echo "Invalid project type: ${{ inputs.project_type }}. Valid types: ${{ env.TYPES }}"
          exit 1

      - name: Checkout
        uses: actions/checkout@v2

      - name: configure aws credentials using OIDC
        if: inputs.project_type == 'docker' && inputs.iam_role_to_assume != '' && inputs.iam_role_session_name != ''
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.iam_role_to_assume }}
          role-session-name: ${{ inputs.iam_role_session_name }}
          aws-region: "ca-central-1"

      - name: Login to Elastic Container Registry
        if: inputs.project_type == 'docker' && inputs.iam_role_to_assume != '' && inputs.iam_role_session_name != ''
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate Docker SBOM
        if: inputs.project_type == 'docker'
        working-directory: ${{ inputs.working_directory }}
        run: |
          docker sbom ${{ inputs.docker_image }} --format cyclonedx-json --output bom.json

      - name: Generate Node SBOM
        if: inputs.project_type == 'node'
        working-directory: ${{ inputs.working_directory }}
        run: |
          npm ci
          npm install -g @cyclonedx/bom@${{ env.CYCLONEDX_NODE }}
          cyclonedx-node --output bom.json

      - name: Generate PHP SBOM
        if: inputs.project_type == 'php'
        working-directory: ${{ inputs.working_directory }}
        run: |
          composer require --dev cyclonedx/cyclonedx-php-composer:${{ env.CYCLONEDX_PHP }}
          composer make-bom --output-format=JSON --output-file=bom.json

      - name: Generate Python SBOM
        if: inputs.project_type == 'python'
        working-directory: ${{ inputs.working_directory }}
        run: |
          pip install cyclonedx-bom==${{ env.CYCLONEDX_PYTHON }}
          cyclonedx-bom --requirements --in-file ${{ inputs.in_file }} --format json --output bom.json

      - name: Upload SBOM
        uses: DependencyTrack/gh-upload-sbom@801995c917fdcc580f96275837bcbe6b46e5b159 # v1.0.0
        with:
          serverhostname: sbom.dependencies.security.cdssandbox.xyz
          apikey: ${{ secrets.dependency_track_api_key }}
          autocreate: true
          bomfilename: ${{ inputs.working_directory }}/bom.json
          projectname: ${{ inputs.project_name }}
          projectversion: ${{ inputs.project_version }}
